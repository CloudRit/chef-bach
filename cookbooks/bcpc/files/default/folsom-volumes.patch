diff --git a/nova/api/openstack/compute/servers.py b/nova/api/openstack/compute/servers.py
index 3a14b4f..495b720 100644
--- a/nova/api/openstack/compute/servers.py
+++ b/nova/api/openstack/compute/servers.py
@@ -1281,20 +1281,21 @@ class Controller(wsgi.Controller):
         instance = self._get_server(context, req, id)
 
         bdms = self.compute_api.get_instance_bdms(context, instance)
+        volume_backed = False
 
         try:
             if self.compute_api.is_volume_backed_instance(context, instance,
                                                           bdms):
+                volume_backed = True
                 img = instance['image_ref']
                 src_image = self.compute_api.image_service.show(context, img)
                 image_meta = dict(src_image)
 
-                image = self.compute_api.snapshot_volume_backed(
-                                                       context,
-                                                       instance,
-                                                       image_meta,
-                                                       image_name,
-                                                       extra_properties=props)
+                self.compute_api.snapshot_volume_backed(context,
+                                                        instance,
+                                                        image_meta,
+                                                        image_name,
+                                                        extra_properties=props)
             else:
                 image = self.compute_api.snapshot(context,
                                                   instance,
@@ -1304,15 +1305,19 @@ class Controller(wsgi.Controller):
             common.raise_http_conflict_for_instance_invalid_state(state_error,
                         'createImage')
 
-        # build location of newly-created image entity
-        image_id = str(image['id'])
-        image_ref = os.path.join(req.application_url,
-                                 context.project_id,
-                                 'images',
-                                 image_id)
-
         resp = webob.Response(status_int=202)
-        resp.headers['Location'] = image_ref
+        if not volume_backed:
+            # build location of newly-created image entity
+            image_id = str(image['id'])
+            image_ref = os.path.join(req.application_url,
+                                     context.project_id,
+                                     'images',
+                                     image_id)
+            resp.headers['Location'] = image_ref
+        else:
+            resp.headers['Location'] = os.path.join(req.application_url,
+                                                    context.project_id,
+                                                    'snapshots')
         return resp
 
     def _get_server_admin_password(self, server):
diff --git a/nova/block_device.py b/nova/block_device.py
index 031fcae..0322585 100644
--- a/nova/block_device.py
+++ b/nova/block_device.py
@@ -47,7 +47,7 @@ def properties_root_device_name(properties):
     return root_device_name
 
 
-_ephemeral = re.compile('^ephemeral(\d|[1-9]\d+)$')
+_ephemeral = re.compile('^ephemeral(\d|[0-9]\d+)$')
 
 
 def is_ephemeral(device_name):
@@ -146,3 +146,18 @@ def match_device(device):
     if not match:
         return None
     return match.groups()
+
+def next_dev_name(bus_hint, used_devs):
+    if bus_hint:
+        match = match_device(bus_hint)
+    if match:
+        prefix = strip_dev(match[0])
+    else:
+        prefix = FLAGS.libvirt_disk_prefix or 'vd'
+    plain_devs = [strip_dev(dev) for dev in used_devs]
+    letters_used = [dev[len(prefix):len(prefix)+1] \
+                        for dev in plain_devs if dev.startswith(prefix)]
+    for i in range(26):
+        char = chr(ord('a') + i)
+        if char not in letters_used:
+            return prefix + char
diff --git a/nova/compute/api.py b/nova/compute/api.py
index 8df3fdf..6a3be54 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -658,7 +658,30 @@ class API(base.Base):
                     instance_type, instance_uuid, mappings)
 
         image_bdm = image['properties'].get('block_device_mapping', [])
-        for mapping in (image_bdm, block_device_mapping):
+
+        # convert what would be local files to extra mappings
+        # at the beginning of the list, so they can be overridden
+        # by block_device_mappings added by the user, as the would
+        # be by the libvirt driver normally
+        extra_mappings = []
+        disk_prefix = 'vd'
+        if instance_type['ephemeral_gb'] > 0:
+            extra_mappings.append(
+                dict(delete_on_termination=True,
+                     virtual_name='ephemeral0',
+                     snapshot_id=None,
+                     volume_id=None,
+                     volume_size=instance_type['ephemeral_gb'],
+                     device_name=disk_prefix + 'b'))
+        if instance_type['swap'] > 0:
+            extra_mappings.append(
+                dict(delete_on_termination=True,
+                     virtual_name='swap',
+                     snapshot_id=None,
+                     volume_id=None,
+                     volume_size=instance_type['swap'],
+                     device_name=disk_prefix + 'c'))
+        for mapping in (extra_mappings, image_bdm, block_device_mapping):
             if not mapping:
                 continue
             self._update_block_device_mapping(elevated,
@@ -1382,7 +1405,7 @@ class API(base.Base):
         # hence the zero size
         image_meta['size'] = 0
 
-        return self.image_service.create(context, image_meta, data='')
+        return None
 
     def _get_minram_mindisk_params(self, context, instance):
         try:
diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index d1c18d8..797606a 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -36,6 +36,7 @@ terminating it.
 
 import contextlib
 import functools
+import math
 import socket
 import sys
 import time
@@ -416,20 +417,6 @@ class ComputeManager(manager.SchedulerDependentManager):
 
             if bdm['no_device']:
                 continue
-            if bdm['virtual_name']:
-                virtual_name = bdm['virtual_name']
-                device_name = bdm['device_name']
-                assert block_device.is_swap_or_ephemeral(virtual_name)
-                if virtual_name == 'swap':
-                    swap = {'device_name': device_name,
-                            'swap_size': bdm['volume_size']}
-                elif block_device.is_ephemeral(virtual_name):
-                    eph = {'num': block_device.ephemeral_num(virtual_name),
-                           'virtual_name': virtual_name,
-                           'device_name': device_name,
-                           'size': bdm['volume_size']}
-                    ephemerals.append(eph)
-                continue
 
             if ((bdm['snapshot_id'] is not None) and
                 (bdm['volume_id'] is None)):
@@ -496,6 +483,7 @@ class ComputeManager(manager.SchedulerDependentManager):
                             requested_networks)
                     block_device_info = self._prep_block_device(context,
                             instance)
+                    LOG.debug('block_device_info = %s', block_device_info)
                     instance = self._spawn(context, instance, image_meta,
                                            network_info, block_device_info,
                                            injected_files, admin_password)
@@ -727,12 +715,113 @@ class ComputeManager(manager.SchedulerDependentManager):
 
         return network_info
 
+    def _wait_for_status(self, context, timeout, prep_statuses, end_status,
+                         func, *args, **kwargs):
+        end = time.time() + timeout
+        while True:
+            result = func(*args, **kwargs)
+            if result['status'] not in prep_statuses or (timeout and
+                                                         time.time() > end):
+                break
+            greenthread.sleep(1)
+
+        if result['status'] in prep_statuses:
+            raise exception.TimedOut()
+        elif result['status'] != end_status:
+            expected = prep_statuses + [end_status]
+            raise exception.UnexpectedStatus(expected=expected,
+                                             actual=result['status'])
+        return result
+
+    def _sync_create_volume(self, context, size, name=None, description=None,
+                            image_id=None):
+        volume = self.volume_api.create(context, size, name, description,
+                                        image_id=image_id)
+        try:
+            return self._wait_for_status(context, FLAGS.block_dev_setup_timeout,
+                                         ['creating', 'downloading'],
+                                         'available',
+                                         self.volume_api.get,
+                                         context, volume['id'])
+        except exception.TimedOut:
+            msg = _('Failed to create volume %s from image %s')
+            LOG.debug(msg, volume['id'], image_id)
+            raise
+
+    def _replace_local_disks_with_volumes(self, context, instance):
+        LOG.debug('replacing local disks')
+        instance_type_id = instance['instance_type_id']
+        instance_type = instance_types.get_instance_type(instance_type_id)
+        instance_uuid = instance['uuid']
+
+        image_ref = instance['image_ref']
+        used_devices = []
+        if image_ref:
+            (image_service, image_id) = glance.get_remote_image_service(
+                context, instance['image_ref'])
+            image = image_service.show(context, image_id)
+            # root device
+            size = instance_type['root_gb']
+            if not size:
+                size = int(math.ceil(float(image['size']) / 1024**3))
+            vol = self._sync_create_volume(context, size,
+                                           'auto-created root',
+                                           'root for ' + instance_uuid,
+                                           image_id=image['id'])
+            root_device = (FLAGS.libvirt_disk_prefix or 'vd') + 'a'
+            properties = dict(instance_uuid=instance_uuid,
+                              device_name=root_device,
+                              delete_on_termination=True,
+                              volume_id=vol['id'],
+                              volume_size=vol['size'])
+            self.db.block_device_mapping_create(context, properties)
+            used_devices.append(root_device)
+            LOG.debug('added volume %s for root', vol)
+
+        bdms = self.db.block_device_mapping_get_all_by_instance(context,
+                                                                instance_uuid)
+        LOG.debug('len bdms = %s', len(bdms))
+
+        used_devices += [bdm['device_name'] for bdm in bdms if bdm['device_name']]
+        for mapping in bdms:
+            LOG.debug('mapping is %s', mapping)
+            # already a volume, or lack of device marker
+            if (mapping['volume_id'] or
+                mapping['snapshot_id'] or
+                mapping['no_device']):
+                continue
+
+            vname = mapping['virtual_name']
+            size = mapping['volume_size']
+            vol = self._sync_create_volume(context, size,
+                                           'auto-created ' + vname,
+                                           vname + ' for ' + instance_uuid)
+            hint = '/dev/' + (FLAGS.libvirt_disk_prefix or 'vd') + 'a'
+            if used_devices:
+                hint = used_devices[0]
+            device_name = mapping['device_name'] or \
+                block_device.next_dev_name(hint, used_devices)
+            used_devices.append(device_name)
+            properties = dict(instance_uuid=instance_uuid,
+                              device_name=device_name,
+                              delete_on_termination=True,
+                              virtual_name=vname,
+                              volume_id=vol['id'],
+                              volume_size=vol['size'])
+            self.db.block_device_mapping_update_or_create(context,
+                                                          properties)
+
     def _prep_block_device(self, context, instance):
         """Set up the block device for an instance with error logging"""
         self._instance_update(context, instance['uuid'],
                               vm_state=vm_states.BUILDING,
                               task_state=task_states.BLOCK_DEVICE_MAPPING)
         try:
+            if FLAGS.always_use_volumes:
+                LOG.debug('creating bdm for local disks')
+                self._replace_local_disks_with_volumes(context,
+                                                       instance)
+
             return self._setup_block_device_mapping(context, instance)
         except Exception:
             LOG.exception(_('Instance failed block device setup'),
diff --git a/nova/exception.py b/nova/exception.py
index 2eeef04..6e5003c 100644
--- a/nova/exception.py
+++ b/nova/exception.py
@@ -196,6 +196,12 @@ class GlanceConnectionFailed(NovaException):
     message = _("Connection to glance host %(host)s:%(port)s failed: "
         "%(reason)s")
 
+class TimedOut(NovaException):
+    message = _("Operation timed out.")
+
+class UnexpectedStatus(NovaException):
+    message = _("unexpected status: expecting one of %(expected)s but "
+                "the actual status is %(actual)s")
 
 class NotAuthorized(NovaException):
     message = _("Not authorized.")
diff --git a/nova/flags.py b/nova/flags.py
index 7b8c841..731536d 100644
--- a/nova/flags.py
+++ b/nova/flags.py
@@ -428,6 +428,12 @@ global_opts = [
     cfg.StrOpt('control_exchange',
                default='nova',
                help='AMQP exchange to connect to if using RabbitMQ or Qpid'),
+    cfg.BoolOpt('always_use_volumes',
+               default=False,
+               help='Whether to use volumes instead of local files for instances'),
+    cfg.IntOpt('block_dev_setup_timeout',
+               default=0,
+               help='How long to wait for block device creation when building an instance'),
 ]
 
 FLAGS.register_opts(global_opts)
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 5c3283e..03f80c3 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -1346,63 +1346,6 @@ class LibvirtDriver(driver.ComputeDriver):
         if size == 0 or suffix == '.rescue':
             size = None
 
-        if not self._volume_in_mapping(self.default_root_device,
-                                       block_device_info):
-            image('disk').cache(fetch_func=libvirt_utils.fetch_image,
-                                context=context,
-                                filename=root_fname,
-                                size=size,
-                                image_id=disk_images['image_id'],
-                                user_id=instance['user_id'],
-                                project_id=instance['project_id'])
-
-        ephemeral_gb = instance['ephemeral_gb']
-        if ephemeral_gb and not self._volume_in_mapping(
-                self.default_second_device, block_device_info):
-            swap_device = self.default_third_device
-            fn = functools.partial(self._create_ephemeral,
-                                   fs_label='ephemeral0',
-                                   os_type=instance["os_type"])
-            fname = "ephemeral_%s_%s_%s" % ("0",
-                                            ephemeral_gb,
-                                            instance["os_type"])
-            size = ephemeral_gb * 1024 * 1024 * 1024
-            image('disk.local').cache(fetch_func=fn,
-                                      filename=fname,
-                                      size=size,
-                                      ephemeral_size=ephemeral_gb)
-        else:
-            swap_device = self.default_second_device
-
-        for eph in driver.block_device_info_get_ephemerals(block_device_info):
-            fn = functools.partial(self._create_ephemeral,
-                                   fs_label='ephemeral%d' % eph['num'],
-                                   os_type=instance["os_type"])
-            size = eph['size'] * 1024 * 1024 * 1024
-            fname = "ephemeral_%s_%s_%s" % (eph['num'],
-                                            eph['size'],
-                                            instance["os_type"])
-            image(_get_eph_disk(eph)).cache(fetch_func=fn,
-                                            filename=fname,
-                                            size=size,
-                                            ephemeral_size=eph['size'])
-
-        swap_mb = 0
-
-        swap = driver.block_device_info_get_swap(block_device_info)
-        if driver.swap_is_usable(swap):
-            swap_mb = swap['swap_size']
-        elif (inst_type['swap'] > 0 and
-              not self._volume_in_mapping(swap_device, block_device_info)):
-            swap_mb = inst_type['swap']
-
-        if swap_mb > 0:
-            size = swap_mb * 1024 * 1024
-            image('disk.swap').cache(fetch_func=self._create_swap,
-                                     filename="swap_%s" % swap_mb,
-                                     size=size,
-                                     swap_mb=swap_mb)
-
         # target partition for file injection
         target_partition = None
         if not instance['kernel_id']:
@@ -1634,50 +1577,6 @@ class LibvirtDriver(driver.ComputeDriver):
                                        root_device_type)
                     devices.append(diskos)
 
-                ephemeral_device = None
-                if not (self._volume_in_mapping(self.default_second_device,
-                                                block_device_info) or
-                        0 in [eph['num'] for eph in
-                              driver.block_device_info_get_ephemerals(
-                            block_device_info)]):
-                    if instance['ephemeral_gb'] > 0:
-                        ephemeral_device = self.default_second_device
-
-                if ephemeral_device is not None:
-                    disklocal = disk_info('disk.local', ephemeral_device)
-                    devices.append(disklocal)
-
-                if ephemeral_device is not None:
-                    swap_device = self.default_third_device
-                    db.instance_update(
-                        nova_context.get_admin_context(), instance['uuid'],
-                        {'default_ephemeral_device':
-                             '/dev/' + self.default_second_device})
-                else:
-                    swap_device = self.default_second_device
-
-                for eph in driver.block_device_info_get_ephemerals(
-                    block_device_info):
-                    diskeph = disk_info(_get_eph_disk(eph),
-                                        block_device.strip_dev(
-                            eph['device_name']))
-                    devices.append(diskeph)
-
-                swap = driver.block_device_info_get_swap(block_device_info)
-                if driver.swap_is_usable(swap):
-                    diskswap = disk_info('disk.swap',
-                                         block_device.strip_dev(
-                            swap['device_name']))
-                    devices.append(diskswap)
-                elif (inst_type['swap'] > 0 and
-                      not self._volume_in_mapping(swap_device,
-                                                  block_device_info)):
-                    diskswap = disk_info('disk.swap', swap_device)
-                    devices.append(diskswap)
-                    db.instance_update(
-                        nova_context.get_admin_context(), instance['uuid'],
-                        {'default_swap_device': '/dev/' + swap_device})
-
                 for vol in block_device_mapping:
                     connection_info = vol['connection_info']
                     mount_device = vol['mount_device'].rpartition("/")[2]
